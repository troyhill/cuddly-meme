[{"name":"app.R","content":"### works - shows how to create plots and tables based on an uploaded csv file.\r\n### This file implements a three-file upload and checks if a directory is available to auto-load files\r\n\r\n# shiny::runGitHub('KaranHub', 'KaranKakouei', ref=\"main\")\r\n\r\n# ui.R\r\nlibrary(shiny)\r\nlibrary(shinydashboard)\r\nlibrary(leaflet)\r\nlibrary(bslib)\r\nlibrary(plyr)\r\nlibrary(ggplot2)\r\n\r\n\r\nui <- dashboardPage(\r\n  dashboardHeader(title = \"Basic dashboard\"),\r\n  dashboardSidebar(\r\n    fileInput(\"lab_data\", \"Browse to CSV file with proficiency test data\",\r\n              multiple = FALSE,\r\n              accept = c(\"text/csv\",\r\n                         \"text/comma-separated-values,text/plain\",\r\n                         \".csv\")),\r\n    fileInput(\"location_file\", \"Browse to CSV file with laboratory locations\",\r\n              multiple = FALSE,\r\n              accept = c(\"text/csv\",\r\n                         \"text/comma-separated-values,text/plain\",\r\n                         \".csv\")),\r\n    fileInput(\"method_file\", \"Browse to CSV file with method list\",\r\n              multiple = FALSE,\r\n              accept = c(\"text/csv\",\r\n                         \"text/comma-separated-values,text/plain\",\r\n                         \".csv\")),\r\n    sidebarMenu(\r\n      # menuItem(\"Dashboard\", tabName = \"dashboard\", icon = icon(\"dashboard\")),\r\n      menuItem(\"Data Preview\", tabName = \"widgets\", icon = icon(\"th\"))\r\n    )\r\n  ),\r\n  dashboardBody(\r\n    tabItems(\r\n      # First tab content\r\n      tabItem(tabName = \"widgets\",\r\n                 h3(htmlOutput('text1'), #output$text1 <- renderText( \"Proficiency test data preview\")\r\n                 plotOutput(\"plot_preview\"),\r\n                 h3(htmlOutput('text2'), #\"Map preview\",\r\n                 leafletOutput(\"map_preview\", width = \"700px\", height = \"400px\")),\r\n                 h3(htmlOutput('text3'), #\"Methods list\",\r\n                 tableOutput(\"table_preview\"))\r\n                 )\r\n      )\r\n    )\r\n  ) # The ui side you could create with a loop in renderUI():\r\n)\r\n\r\nserver <- function(input, output) {\r\n  # https://stackoverflow.com/questions/59055733/generating-multiple-graphs-plots-from-uploaded-files-in-shiny\r\n\r\n  global <- reactiveValues()\r\n\r\n  # data <- reactive({\r\n  #   inFile <- input$file1\r\n  #   if(!is.null(inFile)){\r\n  #     df1 <- read.csv(inFile$datapath, stringsAsFactors = FALSE)\r\n  #     df1 <- gsub(df1$PT_test_date, pattern = '/| ', replacement = '-')\r\n  #     df1 <- as.Date(df1$PT_test_date, format = '%Y-%m-%d')\r\n  #   }\r\n  # })\r\n  output$text1 <- output$text2 <- output$text3 <- renderText(\"\")\r\n\r\n  if(!exists('input$lab_data')) {\r\n    output$text1 <- renderText(\"Checking if file exists\")\r\n\r\n    path_tst <- getwd()\r\n    path_components <- c(as.list(strsplit(x = path_tst, split = '/')[[1]][1:4]),\r\n                         'R8 All LSASD - Region 8 Lab - DWLabCert',\r\n                         'Work_Instruction',\r\n                         'test-data')\r\n    path_begin   <- do.call(file.path, as.list(path_components))\r\n    if (dir.exists(path_begin)) {\r\n      file_lst   <- list.files(path_begin, recursive = TRUE, full.names = TRUE)\r\n\r\n      locations_path   <- grep(x = file_lst, pattern = 'data_lab_list', value = TRUE)[1]\r\n      dat_loc        <- read.csv(locations_path)\r\n      if(all(c(\"lat\", \"long\", \"Region\", \"Laboratory.Name\", \"Laboratory.Location..City..State.\") %in% names(dat_loc))) {\r\n        dat_loc      <- dat_loc[grepl(x = dat_loc$Region, pattern = '8'), ]\r\n        dat_loc      <- dat_loc[!is.na(x = dat_loc$lat), ]\r\n        output$text2 <- renderText( \"Laboratory locations from input CSV:\")\r\n        global$locations <- dat_loc\r\n      } else {\r\n        output$text2 <- renderText(c('WARNING: Lab location dataset should have the following column names:<br>', paste0(c(\"lat\", \"long\", \"Region\", \"Laboratory.Name\", \"Laboratory.Location..City..State.\"), collapse = ', ')))\r\n        global$locations <- NULL\r\n      }\r\n\r\n      dat_methods <- read.csv(grep(x = file_lst, pattern = 'data_NPDWS_methods_', value = TRUE)[1])\r\n      if(all(c(\"method\", \"common_name\", \"category\") %in% names(dat_methods))) {\r\n        global$method_data <- dat_methods\r\n        output$text3 <- renderText( \"NPDWS methods found in CSV:\")\r\n      } else {\r\n        output$text3 <- renderText(c('WARNING: Method file should have the following column names:<br>', paste0(c(\"method\", \"common_name\", \"category\"), collapse = ', ')))\r\n        global$method_data <- NULL\r\n      }\r\n\r\n      dat1 <- read.csv(grep(x = file_lst, pattern = \"data_proficiency_test\", value = TRUE)[1])\r\n      if(all(c('Laboratory.Name', 'Laboratory.Location..City..State.', 'method', 'PT_result', 'PT_test_date') %in% names(dat1))) {\r\n        date_tmp <- gsub(as.character(dat1$PT_test_date), pattern = '/| ', replacement = '-')\r\n        dat1$PT_test_date <- as.Date(as.character(date_tmp), format = '%m-%d-%Y')\r\n        dat1$PT_test_date[is.na(dat1$PT_test_date)] <- as.Date(date_tmp[is.na(dat1$PT_test_date)], format = '%Y-%m-%d')\r\n        dat1$PT_test_date[is.na(dat1$PT_test_date)] <- as.Date(date_tmp[is.na(dat1$PT_test_date)], format = '%d-%m-%Y')\r\n        global$lab_data <- dat1 # FROM HERE ON USE: global$data\r\n        output$text1 <- renderText( \"Proficiency test data preview\")\r\n      } else {\r\n        output$text1 <- renderText(c('WARNING: Proficiency test dataset should have the following column names:<br>', paste0(c('Laboratory.Name', 'Laboratory.Location..City..State.', 'method', 'PT_result', 'PT_test_date'), collapse = ', ')))\r\n        global$lab_data <- NA\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  observeEvent(input$lab_data, {\r\n    # dat <- read.csv2(input$file1$datapath)\r\n    # DO LOTS OF OPERATIONS ON data\r\n    dat      <- read.csv(input$lab_data$datapath, stringsAsFactors = FALSE)\r\n    if(all(c('Laboratory.Name', 'Laboratory.Location..City..State.', 'method', 'PT_result', 'PT_test_date') %in% names(dat))) {\r\n      date_tmp <- gsub(as.character(dat$PT_test_date), pattern = '/| ', replacement = '-')\r\n      # message(head(date_tmp), '\\n')\r\n      # message(head(as.Date(date_tmp[is.na(dat$PT_test_date)], format = '%m-%d-%Y')))\r\n      dat$PT_test_date <- as.Date(as.character(date_tmp), format = '%m-%d-%Y')\r\n      dat$PT_test_date[is.na(dat$PT_test_date)] <- as.Date(date_tmp[is.na(dat$PT_test_date)], format = '%Y-%m-%d')\r\n      dat$PT_test_date[is.na(dat$PT_test_date)] <- as.Date(date_tmp[is.na(dat$PT_test_date)], format = '%d-%m-%Y')\r\n      global$lab_data <- dat # FROM HERE ON USE: global$data\r\n      output$text1 <- renderText( \"Proficiency test data preview\")\r\n      } else {\r\n          output$text1 <- renderText(c('WARNING: Proficiency test dataset should have the following column names:<br>', paste0(c('Laboratory.Name', 'Laboratory.Location..City..State.', 'method', 'PT_result', 'PT_test_date'), collapse = ', ')))\r\n          global$lab_data <- NA\r\n      # message('Proficiency test dataset should have column names: ', paste0(c('Laboratory.Name', 'Laboratory.Location..City..State.', 'method', 'PT_result', 'PT_test_date'), collapse = ', '))\r\n      }\r\n  })\r\n\r\n  observeEvent(input$location_file, {\r\n    # dat <- read.csv2(input$file1$datapath)\r\n    # DO LOTS OF OPERATIONS ON data\r\n    dat      <- read.csv(input$location_file$datapath, stringsAsFactors = FALSE)\r\n    if(all(c(\"lat\", \"long\", \"Region\", \"Laboratory.Name\", \"Laboratory.Location..City..State.\") %in% names(dat))) {\r\n      dat      <- dat[grepl(x = dat$Region, pattern = '8'), ]\r\n      dat      <- dat[!is.na(x = dat$lat), ]\r\n      output$text2 <- renderText( \"Laboratory locations from input CSV:\")\r\n      global$locations <- dat\r\n    } else {\r\n      output$text2 <- renderText(c('WARNING: Lab location dataset should have the following column names:<br>', paste0(c(\"lat\", \"long\", \"Region\", \"Laboratory.Name\", \"Laboratory.Location..City..State.\"), collapse = ', ')))\r\n      global$locations <- NULL\r\n    }\r\n  })\r\n\r\n  observeEvent(input$method_file, {\r\n    # dat <- read.csv2(input$file1$datapath)\r\n    # DO LOTS OF OPERATIONS ON data\r\n    dat      <- read.csv(input$method_file$datapath, stringsAsFactors = FALSE)\r\n    if(all(c(\"method\", \"common_name\", \"category\") %in% names(dat))) {\r\n      global$method_data <- dat\r\n      output$text3 <- renderText(\"NPDWS methods found in CSV:\")\r\n    } else {\r\n      output$text3 <- renderText(c('WARNING: Method file should have the following column names:<br>', paste0(c(\"method\", \"common_name\", \"category\"), collapse = ', ')))\r\n      global$method_data <- NULL\r\n    }\r\n  })\r\n\r\n  output$plot_preview <- renderPlot({\r\n    req(global$lab_data)\r\n    # plot(table(global$data$PT_result))#, global$data$PT_test_date)\r\n    # print(message(summary(format(global$data$PT_test_date, format = '%m-%d-%Y'))))\r\n    # tmp <- global$data\r\n    # tmp$PT_test_date <- format(tmp$PT_test_date, format = '%m-%d-%Y')\r\n    # ggplot(data = tmp, aes(y = PT_result, x = PT_test_date)) + ggplot2::geom_point()\r\n    ggplot(data = global$lab_data, aes(y = PT_result, x = PT_test_date, col = Laboratory.Name)) + ggplot2::geom_point() + facet_wrap(. ~ method) +\r\n      theme_bw() + theme(legend.position = 'none') +\r\n      labs(y = 'Proficiency test outcome', x = '')\r\n  })\r\n\r\n  output$table_preview <- renderTable({\r\n    # req(global$lab_data)\r\n    # head(format(global$data$PT_test_date, format = '%m-%d-%Y')) # displays as date\r\n    # head(global$data$PT_test_date) # displays as numbers\r\n    req(global$method_data)\r\n    paste0(global$method_data$method, collapse = ', ')\r\n    # global$method_data$method\r\n  })\r\n\r\n\r\n  output$map_preview <- renderLeaflet({\r\n    req(global$locations)\r\n    locations <- global$locations\r\n    marker_colors <- sapply(locations$Laboratory.Name, function(name) {\r\n        # if (most_recent_row == FALSE) {\r\n          return(\"green\")\r\n      #   } else if (most_recent_row == TRUE) {\r\n      #     return(\"red\")\r\n      #   }\r\n      # }\r\n      # return(\"gray\")  # Default color if no tests are available\r\n    })\r\n\r\n    # Debugging: Print marker colors and shapes\r\n    # print(marker_colors)\r\n    # print(marker_shapes)\r\n\r\n    marker_popups <- sapply(locations$Laboratory.Name, function(name) {\r\n      paste(\"Lab Name: \", name, \"<br><br>\")\r\n    })\r\n    # print(marker_popups)\r\n\r\n\r\n    leaflet(locations) %>%\r\n      addTiles() %>%\r\n      addCircleMarkers(\r\n        lng = locations$long,\r\n        lat = locations$lat,\r\n        color = unname(marker_colors),\r\n        radius = 8,\r\n        popup = unname(marker_popups) # ~Laboratory.Name #\r\n      )\r\n  })\r\n\r\n}\r\n\r\nshinyApp(ui, server)\r\n\r\n\r\n","type":"text"}]
